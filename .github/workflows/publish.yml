name: Build & Publish
on: [push, pull_request]
env:
  CDN_URL: https://cdn.jcu.edu.au/cookbook
  CDN_AWS_REGION: ap-southeast-2

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Use Node.js LTS
      uses: actions/setup-node@v2
      with:
        node-version: '14' # Use Latest LTS
        cache: 'yarn'

    - name: Install Packages
      run: yarn

    # - name: Run Tests
    #   run: yarn test

    - name: Create distribution
      run: yarn dist

    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: dist
        path: dist/
        retention-days: 1

  pre-release:
    needs: build
    name: Publish in-development version

    # Only run on push on the `master` branch in the main repository
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' && github.repository_owner == 'jcu' }}

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Setup Node
      uses: actions/setup-node@v2
      with:
        node-version: '14' # Use Latest LTS
        cache: 'yarn'
        registry-url: 'https://registry.npmjs.org'

    - name: Download build artifact
      uses: actions/download-artifact@v2
      with:
        name: dist
        path: ./dist

    - name: Output distributed version
      run: echo "${{ github.sha }}" > dist/version.txt

    # Hash all files not ending with .txt
    - name: Hash all release files
      run: find . -type f \( ! -iname "*.txt" \) -exec sh -c 'cat "{}" | openssl dgst -sha512 -binary | openssl base64 -A | sed -e "s/^/sha512-/;" > "{}.hash.txt"' \;

    # Basically appends a pre-release onto the version number e.g. 3.1.34 -> 3.1.34-c86b73084ae08d05b61367a950d65211563fb5c9
    # Original sed: 's/"version":.*\"\(\([0-9]\+\).\([0-9]\+\).\([0-9]\+\)\)"/"version": "\1-<id>"/'
    - name: Update package version
      run: sed -i ${{ format('''s/"version":.*\"\(\([0-9]\+\).\([0-9]\+\).\([0-9]\+\)\)"/"version"{0} "\1-{1}"/''', ':', github.sha) }} package.json

    - name: Upload to CDN
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --acl public-read --follow-symlinks --delete
      env:
        AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ env.CDN_AWS_REGION }}
        SOURCE_DIR: 'dist'
        DEST_DIR: 'public/master'

    - name: Publish npm package
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: npm publish . --tag dev

  publish:
    needs: build
    name: Publish tagged release

    # Only run on a Tag in the main repository
    if: ${{ startsWith(github.ref, 'refs/tags/v') && github.repository_owner == 'jcu' }}

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Setup Node
      uses: actions/setup-node@v2
      with:
        node-version: '14' # Use Latest LTS
        cache: 'yarn'
        registry-url: 'https://registry.npmjs.org'

    - name: Build compare-semver workflow action
      run: |
        yarn --cwd './actions/compare-semver'
        yarn --cwd './actions/compare-semver' run compile

    - name: Download build artifact
      uses: actions/download-artifact@v2
      with:
        name: dist
        path: dist/

    - name: Get current tag
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v*}" >> $GITHUB_ENV

    # Version will be 0.0.0 on non-zero exit code
    - name: Get latest release version
      run: |
        LATEST_VERSION=$(curl -sf ${{ env.CDN_URL }}/latest/version.txt || echo "0.0.0")
        echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV;

    - name: Compare SemVers (latest)
      id: compared_semvers
      uses: ./actions/compare-semver
      with:
        version: ${{ env.RELEASE_VERSION }}
        compare: ${{ env.LATEST_VERSION }}

    - name: Get latest major version
      run: |
        LOOKUP_VERSION="${{ steps.compared_semvers.outputs.version-major }}"
        LATEST_MAJOR_VERSION=$(curl -sf ${{ env.CDN_URL }}/$LOOKUP_VERSION/version.txt || echo "0.0.0")
        echo "LATEST_MAJOR_VERSION=$LATEST_MAJOR_VERSION" >> $GITHUB_ENV;

    - name: Get latest minor version
      run: |
        LOOKUP_VERSION="${{ steps.compared_semvers.outputs.version-major }}.${{ steps.compared_semvers.outputs.version-minor }}"
        LATEST_MINOR_VERSION=$(curl -sf ${{ env.CDN_URL }}/$LOOKUP_VERSION/version.txt || echo "0.0.0")
        echo "LATEST_MINOR_VERSION=$LATEST_MINOR_VERSION" >> $GITHUB_ENV;

    - name: Compare SemVers (major)
      id: compared_semvers_major
      uses: ./actions/compare-semver
      with:
        version: ${{ env.RELEASE_VERSION }}
        compare: ${{ env.LATEST_MAJOR_VERSION }}

    - name: Compare SemVers (minor)
      id: compared_semvers_minor
      uses: ./actions/compare-semver
      with:
        version: ${{ env.RELEASE_VERSION }}
        compare: ${{ env.LATEST_MINOR_VERSION }}

    # Patch, Release and Builds are specifically chosen
    - name: Output distributed version
      run: echo "${{ env.RELEASE_VERSION }}" > dist/version.txt

    # Hash all files not ending with .txt
    - name: Hash all release files
      run: find . -type f \( ! -iname "*.txt" \) -exec sh -c 'cat "{}" | openssl dgst -sha512 -binary | openssl base64 -A | sed -e "s/^/sha512-/;" > "{}.hash.txt"' \;

    - name: Upload to release version path on CDN (/x.y.z-X.X/)
      if: ${{ env.RELEASE_VERSION != null && env.RELEASE_VERSION != '' }}
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --acl public-read --follow-symlinks --delete
      env:
        AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ env.CDN_AWS_REGION }}
        SOURCE_DIR: 'dist'
        DEST_DIR: 'public/${{ env.RELEASE_VERSION }}'

    # Patch, Pre-release and Build need to specifically referenced on the CDN to access and won't
    # be pushed to a auto updated CDN location
    - name: Upload to major version path on CDN (/x/)
      if: ${{ steps.compared_semvers_major.outputs.version-is-latest == 'true' && steps.compared_semvers_major.outputs.version-prerelease == null && steps.compared_semvers_major.outputs.version-build == null }}
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --acl public-read --follow-symlinks --delete
      env:
        AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ env.CDN_AWS_REGION }}
        SOURCE_DIR: 'dist'
        DEST_DIR: 'public/${{ steps.compared_semvers_major.outputs.version-major }}'

    - name: Upload to minor version path on CDN (/x.y/)
      if: ${{ steps.compared_semvers_minor.outputs.version-is-latest == 'true' && steps.compared_semvers_minor.outputs.version-prerelease == null && steps.compared_semvers_minor.outputs.version-build == null }}
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --acl public-read --follow-symlinks --delete
      env:
        AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ env.CDN_AWS_REGION }}
        SOURCE_DIR: 'dist'
        DEST_DIR: 'public/${{ steps.compared_semvers_minor.outputs.version-major }}.${{ steps.compared_semvers_minor.outputs.version-minor }}'

    - name: Upload to latest release path on CDN (/latest/)
      if: ${{ steps.compared_semvers.outputs.version-is-latest == 'true' && steps.compared_semvers.outputs.version-prerelease == null && steps.compared_semvers.outputs.version-build == null }}
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --acl public-read --follow-symlinks --delete
      env:
        AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ env.CDN_AWS_REGION }}
        SOURCE_DIR: 'dist'
        DEST_DIR: 'public/latest'

    - name: Publish NPM package
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: npm publish .
