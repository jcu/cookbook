{"version":3,"sources":["../../assets/scss/_masthead.scss","../../../../node_modules/bootstrap/scss/vendor/_rfs.scss","../../assets/scss/_component-examples.scss","../../../../node_modules/bootstrap/scss/mixins/_breakpoints.scss","../../assets/scss/_syntax.scss","site/docs/dist/css/docs.min.css","../../assets/scss/_custom-docs.scss"],"names":[],"mappings":"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","sourcesContent":["// Source: https://raw.githubusercontent.com/twbs/bootstrap/v5.1.0/site/assets/scss/_masthead.scss\n.bd-masthead {\n  padding: 3rem 0;\n  background: linear-gradient(165deg, tint-color($primary, 95%) 50%, $white 50%);\n\n  h1 {\n    @include font-size(4rem);\n    line-height: 1;\n  }\n\n  p:not(.lead) {\n    color: $gray-700;\n  }\n\n  .btn {\n    padding: .8rem 2rem;\n    font-weight: 600;\n  }\n  .lead {\n    @include font-size(1.5rem);\n    font-weight: 400;\n    color: $gray-700;\n  }\n}\n\n.masthead-followup-icon {\n  padding: .75rem;\n  background-image: linear-gradient(to bottom right, rgba(255, 255, 255, .2), rgba(255, 255, 255, .01));\n  @include border-radius(.75rem);\n  box-shadow: 0 .125rem .25rem rgba(0, 0, 0, .1);\n}\n\n.masthead-followup-svg {\n  filter: drop-shadow(0 1px 0 rgba(0, 0, 0, .125));\n}\n","// stylelint-disable property-blacklist, scss/dollar-variable-default\n\n// SCSS RFS mixin\n//\n// Automated responsive values for font sizes, paddings, margins and much more\n//\n// Licensed under MIT (https://github.com/twbs/rfs/blob/main/LICENSE)\n\n// Configuration\n\n// Base value\n$rfs-base-value: 1.25rem !default;\n$rfs-unit: rem !default;\n\n@if $rfs-unit != rem and $rfs-unit != px {\n  @error \"`#{$rfs-unit}` is not a valid unit for $rfs-unit. Use `px` or `rem`.\";\n}\n\n// Breakpoint at where values start decreasing if screen width is smaller\n$rfs-breakpoint: 1200px !default;\n$rfs-breakpoint-unit: px !default;\n\n@if $rfs-breakpoint-unit != px and $rfs-breakpoint-unit != em and $rfs-breakpoint-unit != rem {\n  @error \"`#{$rfs-breakpoint-unit}` is not a valid unit for $rfs-breakpoint-unit. Use `px`, `em` or `rem`.\";\n}\n\n// Resize values based on screen height and width\n$rfs-two-dimensional: false !default;\n\n// Factor of decrease\n$rfs-factor: 10 !default;\n\n@if type-of($rfs-factor) != number or $rfs-factor <= 1 {\n  @error \"`#{$rfs-factor}` is not a valid  $rfs-factor, it must be greater than 1.\";\n}\n\n// Mode. Possibilities: \"min-media-query\", \"max-media-query\"\n$rfs-mode: min-media-query !default;\n\n// Generate enable or disable classes. Possibilities: false, \"enable\" or \"disable\"\n$rfs-class: false !default;\n\n// 1 rem = $rfs-rem-value px\n$rfs-rem-value: 16 !default;\n\n// Safari iframe resize bug: https://github.com/twbs/rfs/issues/14\n$rfs-safari-iframe-resize-bug-fix: false !default;\n\n// Disable RFS by setting $enable-rfs to false\n$enable-rfs: true !default;\n\n// Cache $rfs-base-value unit\n$rfs-base-value-unit: unit($rfs-base-value);\n\n@function divide($dividend, $divisor, $precision: 10) {\n  $sign: if($dividend > 0 and $divisor > 0 or $dividend < 0 and $divisor < 0, 1, -1);\n  $dividend: abs($dividend);\n  $divisor: abs($divisor);\n  @if $dividend == 0 {\n    @return 0;\n  }\n  @if $divisor == 0 {\n    @error \"Cannot divide by 0\";\n  }\n  $remainder: $dividend;\n  $result: 0;\n  $factor: 10;\n  @while ($remainder > 0 and $precision >= 0) {\n    $quotient: 0;\n    @while ($remainder >= $divisor) {\n      $remainder: $remainder - $divisor;\n      $quotient: $quotient + 1;\n    }\n    $result: $result * 10 + $quotient;\n    $factor: $factor * .1;\n    $remainder: $remainder * 10;\n    $precision: $precision - 1;\n    @if ($precision < 0 and $remainder >= $divisor * 5) {\n      $result: $result + 1;\n    }\n  }\n  $result: $result * $factor * $sign;\n  $dividend-unit: unit($dividend);\n  $divisor-unit: unit($divisor);\n  $unit-map: (\n    \"px\": 1px,\n    \"rem\": 1rem,\n    \"em\": 1em,\n    \"%\": 1%\n  );\n  @if ($dividend-unit != $divisor-unit and map-has-key($unit-map, $dividend-unit)) {\n    $result: $result * map-get($unit-map, $dividend-unit);\n  }\n  @return $result;\n}\n\n// Remove px-unit from $rfs-base-value for calculations\n@if $rfs-base-value-unit == px {\n  $rfs-base-value: divide($rfs-base-value, $rfs-base-value * 0 + 1);\n}\n@else if $rfs-base-value-unit == rem {\n  $rfs-base-value: divide($rfs-base-value, divide($rfs-base-value * 0 + 1, $rfs-rem-value));\n}\n\n// Cache $rfs-breakpoint unit to prevent multiple calls\n$rfs-breakpoint-unit-cache: unit($rfs-breakpoint);\n\n// Remove unit from $rfs-breakpoint for calculations\n@if $rfs-breakpoint-unit-cache == px {\n  $rfs-breakpoint: divide($rfs-breakpoint, $rfs-breakpoint * 0 + 1);\n}\n@else if $rfs-breakpoint-unit-cache == rem or $rfs-breakpoint-unit-cache == \"em\" {\n  $rfs-breakpoint: divide($rfs-breakpoint, divide($rfs-breakpoint * 0 + 1, $rfs-rem-value));\n}\n\n// Calculate the media query value\n$rfs-mq-value: if($rfs-breakpoint-unit == px, #{$rfs-breakpoint}px, #{divide($rfs-breakpoint, $rfs-rem-value)}#{$rfs-breakpoint-unit});\n$rfs-mq-property-width: if($rfs-mode == max-media-query, max-width, min-width);\n$rfs-mq-property-height: if($rfs-mode == max-media-query, max-height, min-height);\n\n// Internal mixin used to determine which media query needs to be used\n@mixin _rfs-media-query {\n  @if $rfs-two-dimensional {\n    @if $rfs-mode == max-media-query {\n      @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}), (#{$rfs-mq-property-height}: #{$rfs-mq-value}) {\n        @content;\n      }\n    }\n    @else {\n      @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}) and (#{$rfs-mq-property-height}: #{$rfs-mq-value}) {\n        @content;\n      }\n    }\n  }\n  @else {\n    @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}) {\n      @content;\n    }\n  }\n}\n\n// Internal mixin that adds disable classes to the selector if needed.\n@mixin _rfs-rule {\n  @if $rfs-class == disable and $rfs-mode == max-media-query {\n    // Adding an extra class increases specificity, which prevents the media query to override the property\n    &,\n    .disable-rfs &,\n    &.disable-rfs {\n      @content;\n    }\n  }\n  @else if $rfs-class == enable and $rfs-mode == min-media-query {\n    .enable-rfs &,\n    &.enable-rfs {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n// Internal mixin that adds enable classes to the selector if needed.\n@mixin _rfs-media-query-rule {\n\n  @if $rfs-class == enable {\n    @if $rfs-mode == min-media-query {\n      @content;\n    }\n\n    @include _rfs-media-query {\n      .enable-rfs &,\n      &.enable-rfs {\n        @content;\n      }\n    }\n  }\n  @else {\n    @if $rfs-class == disable and $rfs-mode == min-media-query {\n      .disable-rfs &,\n      &.disable-rfs {\n        @content;\n      }\n    }\n    @include _rfs-media-query {\n      @content;\n    }\n  }\n}\n\n// Helper function to get the formatted non-responsive value\n@function rfs-value($values) {\n  // Convert to list\n  $values: if(type-of($values) != list, ($values,), $values);\n\n  $val: '';\n\n  // Loop over each value and calculate value\n  @each $value in $values {\n    @if $value == 0 {\n      $val: $val + ' 0';\n    }\n    @else {\n      // Cache $value unit\n      $unit: if(type-of($value) == \"number\", unit($value), false);\n\n      @if $unit == px {\n        // Convert to rem if needed\n        $val: $val + ' ' + if($rfs-unit == rem, #{divide($value, $value * 0 + $rfs-rem-value)}rem, $value);\n      }\n      @else if $unit == rem {\n        // Convert to px if needed\n        $val: $val + ' ' + if($rfs-unit == px, #{divide($value, $value * 0 + 1) * $rfs-rem-value}px, $value);\n      }\n      @else {\n        // If $value isn't a number (like inherit) or $value has a unit (not px or rem, like 1.5em) or $ is 0, just print the value\n        $val: $val + ' ' + $value;\n      }\n    }\n  }\n\n  // Remove first space\n  @return unquote(str-slice($val, 2));\n}\n\n// Helper function to get the responsive value calculated by RFS\n@function rfs-fluid-value($values) {\n  // Convert to list\n  $values: if(type-of($values) != list, ($values,), $values);\n\n  $val: '';\n\n  // Loop over each value and calculate value\n  @each $value in $values {\n    @if $value == 0 {\n      $val: $val + ' 0';\n    }\n\n    @else {\n      // Cache $value unit\n      $unit: if(type-of($value) == \"number\", unit($value), false);\n\n      // If $value isn't a number (like inherit) or $value has a unit (not px or rem, like 1.5em) or $ is 0, just print the value\n      @if not $unit or $unit != px and $unit != rem {\n        $val: $val + ' ' + $value;\n      }\n\n      @else {\n        // Remove unit from $value for calculations\n        $value: divide($value, $value * 0 + if($unit == px, 1, divide(1, $rfs-rem-value)));\n\n        // Only add the media query if the value is greater than the minimum value\n        @if abs($value) <= $rfs-base-value or not $enable-rfs {\n          $val: $val + ' ' +  if($rfs-unit == rem, #{divide($value, $rfs-rem-value)}rem, #{$value}px);\n        }\n        @else {\n          // Calculate the minimum value\n          $value-min: $rfs-base-value + divide(abs($value) - $rfs-base-value, $rfs-factor);\n\n          // Calculate difference between $value and the minimum value\n          $value-diff: abs($value) - $value-min;\n\n          // Base value formatting\n          $min-width: if($rfs-unit == rem, #{divide($value-min, $rfs-rem-value)}rem, #{$value-min}px);\n\n          // Use negative value if needed\n          $min-width: if($value < 0, -$min-width, $min-width);\n\n          // Use `vmin` if two-dimensional is enabled\n          $variable-unit: if($rfs-two-dimensional, vmin, vw);\n\n          // Calculate the variable width between 0 and $rfs-breakpoint\n          $variable-width: #{divide($value-diff * 100, $rfs-breakpoint)}#{$variable-unit};\n\n          // Return the calculated value\n          $val: $val + ' calc(' + $min-width + if($value < 0, ' - ', ' + ') + $variable-width + ')';\n        }\n      }\n    }\n  }\n\n  // Remove first space\n  @return unquote(str-slice($val, 2));\n}\n\n// RFS mixin\n@mixin rfs($values, $property: font-size) {\n  @if $values != null {\n    $val: rfs-value($values);\n    $fluidVal: rfs-fluid-value($values);\n\n    // Do not print the media query if responsive & non-responsive values are the same\n    @if $val == $fluidVal {\n      #{$property}: $val;\n    }\n    @else {\n      @include _rfs-rule {\n        #{$property}: if($rfs-mode == max-media-query, $val, $fluidVal);\n\n        // Include safari iframe resize fix if needed\n        min-width: if($rfs-safari-iframe-resize-bug-fix, (0 * 1vw), null);\n      }\n\n      @include _rfs-media-query-rule {\n        #{$property}: if($rfs-mode == max-media-query, $fluidVal, $val);\n      }\n    }\n  }\n}\n\n// Shorthand helper mixins\n@mixin font-size($value) {\n  @include rfs($value);\n}\n\n@mixin padding($value) {\n  @include rfs($value, padding);\n}\n\n@mixin padding-top($value) {\n  @include rfs($value, padding-top);\n}\n\n@mixin padding-right($value) {\n  @include rfs($value, padding-right);\n}\n\n@mixin padding-bottom($value) {\n  @include rfs($value, padding-bottom);\n}\n\n@mixin padding-left($value) {\n  @include rfs($value, padding-left);\n}\n\n@mixin margin($value) {\n  @include rfs($value, margin);\n}\n\n@mixin margin-top($value) {\n  @include rfs($value, margin-top);\n}\n\n@mixin margin-right($value) {\n  @include rfs($value, margin-right);\n}\n\n@mixin margin-bottom($value) {\n  @include rfs($value, margin-bottom);\n}\n\n@mixin margin-left($value) {\n  @include rfs($value, margin-left);\n}\n","// Source: https://raw.githubusercontent.com/twbs/bootstrap/v5.1.0/site/assets/scss/_component-examples.scss\n//\n// Code snippets\n//\n\n.highlight {\n  padding: 1rem;\n  margin-bottom: 1rem;\n  background-color: $gray-100;\n\n  @include media-breakpoint-up(sm) {\n    padding: 1rem 1.5rem;\n  }\n\n  pre {\n    padding: 0;\n    margin-top: .65rem;\n    margin-bottom: .65rem;\n    white-space: pre;\n    background-color: transparent;\n    border: 0;\n  }\n\n  pre code {\n    @include font-size(inherit);\n    color: $gray-900; // Effectively the base text color\n    word-wrap: normal;\n  }\n}\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @return if($max and $max > 0, $max - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min:  breakpoint-min($name, $breakpoints);\n  $next: breakpoint-next($name, $breakpoints);\n  $max:  breakpoint-max($next);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($next, $breakpoints) {\n      @content;\n    }\n  }\n}\n","// Source: https://raw.githubusercontent.com/twbs/bootstrap/v5.1.0/site/assets/scss/_syntax.scss\n\n// stylelint-disable comment-empty-line-before, declaration-block-single-line-max-declarations, selector-class-pattern\n\n/* Background .chroma { background-color: #f0f0f0; } */\n/* Other .chroma .x { } */\n/* Error .chroma .err { } */\n/* LineTableTD .chroma .lntd { vertical-align: top; padding: 0; margin: 0; border: 0; } */\n/* LineTable .chroma .lntable { border-spacing: 0; padding: 0; margin: 0; border: 0; width: auto; overflow: auto; display: block; } */\n/* LineHighlight .chroma .hl { display: block; width: 100%; background-color: #ffffcc; } */\n/* LineNumbersTable .chroma .lnt { margin-right: .4em; padding: 0 .4em; } */\n/* LineNumbers .chroma .ln { margin-right: .4em; padding: 0 .4em; } */\n\n/* Comment */ .chroma .c { color: #727272; }\n/* CommentHashbang */ .chroma .ch { font-style: italic; color: #60a0b0; }\n/* CommentMultiline */ .chroma .cm { color: #727272; }\n/* CommentPreproc */ .chroma .cp { color: #008085; }\n/* CommentPreprocFile */ .chroma .cpf { color: #007020; }\n/* CommentSingle */ .chroma .c1 { color: #727272; }\n/* CommentSpecial */ .chroma .cs { color: #727272; }\n/* Generic .chroma .g { } */\n/* GenericDeleted */ .chroma .gd { background-color: #fcc; border: 1px solid #c00; }\n/* GenericEmph */ .chroma .ge { font-style: italic; }\n/* GenericError */ .chroma .gr { color: #f00; }\n/* GenericHeading */ .chroma .gh { color: #030; }\n/* GenericInserted */ .chroma .gi { background-color: #cfc; border: 1px solid #0c0; }\n/* GenericOutput */ .chroma .go { color: #aaa; }\n/* GenericPrompt */ .chroma .gp { color: #009; }\n/* GenericStrong */ .chroma .gs { font-weight: 700; }\n/* GenericSubheading */ .chroma .gu { color: #030; }\n/* GenericTraceback */ .chroma .gt { color: #9c6; }\n/* GenericUnderline */ .chroma .gl { text-decoration: underline; }\n/* Keyword */ .chroma .k { color: #069; }\n/* KeywordConstant */ .chroma .kc { color: #069; }\n/* KeywordDeclaration */ .chroma .kd { color: #069; }\n/* KeywordNamespace */ .chroma .kn { color: #069; }\n/* KeywordPseudo */ .chroma .kp { color: #069; }\n/* KeywordReserved */ .chroma .kr { color: #069; }\n/* KeywordType */ .chroma .kt { color: #078; }\n/* Literal .chroma .l { } */\n/* LiteralDate .chroma .ld { color: #c24f19 } */\n/* LiteralNumber */ .chroma .m { color: #c24f19; }\n/* LiteralNumberBin */ .chroma .mb { color: #40a070; }\n/* LiteralNumberFloat */ .chroma .mf { color: #c24f19; }\n/* LiteralNumberHex */ .chroma .mh { color: #c24f19; }\n/* LiteralNumberInteger */ .chroma .mi { color: #c24f19; }\n/* LiteralNumberIntegerLong */ .chroma .il { color: #c24f19; }\n/* LiteralNumberOct */ .chroma .mo { color: #c24f19; }\n/* LiteralString */ .chroma .s { color: #d73038; }\n/* LiteralStringAffix */ .chroma .sa { color: #4070a0; }\n/* LiteralStringBacktick */ .chroma .sb { color: #c30; }\n/* LiteralStringChar */ .chroma .sc { color: #c30; }\n/* LiteralStringDelimiter */ .chroma .dl { color: #4070a0; }\n/* LiteralStringDoc */ .chroma .sd { font-style: italic; color: #c30; }\n/* LiteralStringDouble */ .chroma .s2 { color: #c30; }\n/* LiteralStringEscape */ .chroma .se { color: #c30; }\n/* LiteralStringHeredoc */ .chroma .sh { color: #c30; }\n/* LiteralStringInterpol */ .chroma .si { color: #a00; }\n/* LiteralStringOther */ .chroma .sx { color: #c30; }\n/* LiteralStringRegex */ .chroma .sr { color: #337e7e; }\n/* LiteralStringSingle */ .chroma .s1 { color: #c30; }\n/* LiteralStringSymbol */ .chroma .ss { color: #fc3; }\n/* Name .chroma .n { } */\n/* NameAttribute */ .chroma .na { color: #006ee0; }\n/* NameBuiltin */ .chroma .nb { color: #366; }\n/* NameBuiltinPseudo .chroma .bp { } */\n/* NameClass */ .chroma .nc { color: #168174; }\n/* NameConstant */ .chroma .no { color: #360; }\n/* NameDecorator */ .chroma .nd { color: #6b62de; }\n/* NameEntity */ .chroma .ni { color: #727272; }\n/* NameException */ .chroma .ne { color: #c00; }\n/* NameFunction */ .chroma .nf { color: #b715f4; }\n/* NameFunctionMagic .chroma .fm { } */\n/* NameLabel */ .chroma .nl { color: #6b62de; }\n/* NameNamespace */ .chroma .nn { color: #007ca5; }\n/* NameOther .chroma .nx { } */\n/* NameProperty .chroma .py { } */\n/* NameTag */ .chroma .nt { color: #2f6f9f; }\n/* NameVariable */ .chroma .nv { color: #033; }\n/* NameVariableClass .chroma .vc { } */\n/* NameVariableGlobal .chroma .vg { } */\n/* NameVariableInstance .chroma .vi { } */\n/* NameVariableMagic .chroma .vm { } */\n/* Operator */ .chroma .o { color: #555; }\n/* OperatorWord */ .chroma .ow { color: #000; }\n/* Punctuation .chroma .p { } */\n/* TextWhitespace */ .chroma .w { color: #bbb; }\n\n.chroma {\n  .language-bash,\n  .language-sh {\n    &::before {\n      color: #009;\n      content: \"$ \";\n      user-select: none;\n    }\n  }\n\n  .language-powershell::before {\n    color: #009;\n    content: \"PM> \";\n    user-select: none;\n  }\n}\n",".bd-masthead {\n  padding: 3rem 0;\n  background: linear-gradient(165deg, #f2f7fb 50%, #fff 50%);\n}\n.bd-masthead h1 {\n  font-size: calc(1.525rem + 3.3vw);\n  line-height: 1;\n}\n@media (min-width: 1200px) {\n  .bd-masthead h1 {\n    font-size: 4rem;\n  }\n}\n.bd-masthead p:not(.lead) {\n  color: #495057;\n}\n.bd-masthead .btn {\n  padding: 0.8rem 2rem;\n  font-weight: 600;\n}\n.bd-masthead .lead {\n  font-size: calc(1.275rem + 0.3vw);\n  font-weight: 400;\n  color: #495057;\n}\n@media (min-width: 1200px) {\n  .bd-masthead .lead {\n    font-size: 1.5rem;\n  }\n}\n\n.masthead-followup-icon {\n  padding: 0.75rem;\n  background-image: linear-gradient(to bottom right, rgba(255, 255, 255, 0.2), rgba(255, 255, 255, 0.01));\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.1);\n}\n\n.masthead-followup-svg {\n  filter: drop-shadow(0 1px 0 rgba(0, 0, 0, 0.125));\n}\n\n.highlight {\n  padding: 1rem;\n  margin-bottom: 1rem;\n  background-color: #f8f9fa;\n}\n@media (min-width: 576px) {\n  .highlight {\n    padding: 1rem 1.5rem;\n  }\n}\n.highlight pre {\n  padding: 0;\n  margin-top: 0.65rem;\n  margin-bottom: 0.65rem;\n  white-space: pre;\n  background-color: transparent;\n  border: 0;\n}\n.highlight pre code {\n  font-size: inherit;\n  color: #212529;\n  word-wrap: normal;\n}\n\n/* Background .chroma { background-color: #f0f0f0; } */\n/* Other .chroma .x { } */\n/* Error .chroma .err { } */\n/* LineTableTD .chroma .lntd { vertical-align: top; padding: 0; margin: 0; border: 0; } */\n/* LineTable .chroma .lntable { border-spacing: 0; padding: 0; margin: 0; border: 0; width: auto; overflow: auto; display: block; } */\n/* LineHighlight .chroma .hl { display: block; width: 100%; background-color: #ffffcc; } */\n/* LineNumbersTable .chroma .lnt { margin-right: .4em; padding: 0 .4em; } */\n/* LineNumbers .chroma .ln { margin-right: .4em; padding: 0 .4em; } */\n/* Comment */\n.chroma .c {\n  color: #727272;\n}\n\n/* CommentHashbang */\n.chroma .ch {\n  font-style: italic;\n  color: #60a0b0;\n}\n\n/* CommentMultiline */\n.chroma .cm {\n  color: #727272;\n}\n\n/* CommentPreproc */\n.chroma .cp {\n  color: #008085;\n}\n\n/* CommentPreprocFile */\n.chroma .cpf {\n  color: #007020;\n}\n\n/* CommentSingle */\n.chroma .c1 {\n  color: #727272;\n}\n\n/* CommentSpecial */\n.chroma .cs {\n  color: #727272;\n}\n\n/* Generic .chroma .g { } */\n/* GenericDeleted */\n.chroma .gd {\n  background-color: #fcc;\n  border: 1px solid #c00;\n}\n\n/* GenericEmph */\n.chroma .ge {\n  font-style: italic;\n}\n\n/* GenericError */\n.chroma .gr {\n  color: #f00;\n}\n\n/* GenericHeading */\n.chroma .gh {\n  color: #030;\n}\n\n/* GenericInserted */\n.chroma .gi {\n  background-color: #cfc;\n  border: 1px solid #0c0;\n}\n\n/* GenericOutput */\n.chroma .go {\n  color: #aaa;\n}\n\n/* GenericPrompt */\n.chroma .gp {\n  color: #009;\n}\n\n/* GenericStrong */\n.chroma .gs {\n  font-weight: 700;\n}\n\n/* GenericSubheading */\n.chroma .gu {\n  color: #030;\n}\n\n/* GenericTraceback */\n.chroma .gt {\n  color: #9c6;\n}\n\n/* GenericUnderline */\n.chroma .gl {\n  text-decoration: underline;\n}\n\n/* Keyword */\n.chroma .k {\n  color: #069;\n}\n\n/* KeywordConstant */\n.chroma .kc {\n  color: #069;\n}\n\n/* KeywordDeclaration */\n.chroma .kd {\n  color: #069;\n}\n\n/* KeywordNamespace */\n.chroma .kn {\n  color: #069;\n}\n\n/* KeywordPseudo */\n.chroma .kp {\n  color: #069;\n}\n\n/* KeywordReserved */\n.chroma .kr {\n  color: #069;\n}\n\n/* KeywordType */\n.chroma .kt {\n  color: #078;\n}\n\n/* Literal .chroma .l { } */\n/* LiteralDate .chroma .ld { color: #c24f19 } */\n/* LiteralNumber */\n.chroma .m {\n  color: #c24f19;\n}\n\n/* LiteralNumberBin */\n.chroma .mb {\n  color: #40a070;\n}\n\n/* LiteralNumberFloat */\n.chroma .mf {\n  color: #c24f19;\n}\n\n/* LiteralNumberHex */\n.chroma .mh {\n  color: #c24f19;\n}\n\n/* LiteralNumberInteger */\n.chroma .mi {\n  color: #c24f19;\n}\n\n/* LiteralNumberIntegerLong */\n.chroma .il {\n  color: #c24f19;\n}\n\n/* LiteralNumberOct */\n.chroma .mo {\n  color: #c24f19;\n}\n\n/* LiteralString */\n.chroma .s {\n  color: #d73038;\n}\n\n/* LiteralStringAffix */\n.chroma .sa {\n  color: #4070a0;\n}\n\n/* LiteralStringBacktick */\n.chroma .sb {\n  color: #c30;\n}\n\n/* LiteralStringChar */\n.chroma .sc {\n  color: #c30;\n}\n\n/* LiteralStringDelimiter */\n.chroma .dl {\n  color: #4070a0;\n}\n\n/* LiteralStringDoc */\n.chroma .sd {\n  font-style: italic;\n  color: #c30;\n}\n\n/* LiteralStringDouble */\n.chroma .s2 {\n  color: #c30;\n}\n\n/* LiteralStringEscape */\n.chroma .se {\n  color: #c30;\n}\n\n/* LiteralStringHeredoc */\n.chroma .sh {\n  color: #c30;\n}\n\n/* LiteralStringInterpol */\n.chroma .si {\n  color: #a00;\n}\n\n/* LiteralStringOther */\n.chroma .sx {\n  color: #c30;\n}\n\n/* LiteralStringRegex */\n.chroma .sr {\n  color: #337e7e;\n}\n\n/* LiteralStringSingle */\n.chroma .s1 {\n  color: #c30;\n}\n\n/* LiteralStringSymbol */\n.chroma .ss {\n  color: #fc3;\n}\n\n/* Name .chroma .n { } */\n/* NameAttribute */\n.chroma .na {\n  color: #006ee0;\n}\n\n/* NameBuiltin */\n.chroma .nb {\n  color: #366;\n}\n\n/* NameBuiltinPseudo .chroma .bp { } */\n/* NameClass */\n.chroma .nc {\n  color: #168174;\n}\n\n/* NameConstant */\n.chroma .no {\n  color: #360;\n}\n\n/* NameDecorator */\n.chroma .nd {\n  color: #6b62de;\n}\n\n/* NameEntity */\n.chroma .ni {\n  color: #727272;\n}\n\n/* NameException */\n.chroma .ne {\n  color: #c00;\n}\n\n/* NameFunction */\n.chroma .nf {\n  color: #b715f4;\n}\n\n/* NameFunctionMagic .chroma .fm { } */\n/* NameLabel */\n.chroma .nl {\n  color: #6b62de;\n}\n\n/* NameNamespace */\n.chroma .nn {\n  color: #007ca5;\n}\n\n/* NameOther .chroma .nx { } */\n/* NameProperty .chroma .py { } */\n/* NameTag */\n.chroma .nt {\n  color: #2f6f9f;\n}\n\n/* NameVariable */\n.chroma .nv {\n  color: #033;\n}\n\n/* NameVariableClass .chroma .vc { } */\n/* NameVariableGlobal .chroma .vg { } */\n/* NameVariableInstance .chroma .vi { } */\n/* NameVariableMagic .chroma .vm { } */\n/* Operator */\n.chroma .o {\n  color: #555;\n}\n\n/* OperatorWord */\n.chroma .ow {\n  color: #000;\n}\n\n/* Punctuation .chroma .p { } */\n/* TextWhitespace */\n.chroma .w {\n  color: #bbb;\n}\n\n.chroma .language-bash::before,\n.chroma .language-sh::before {\n  color: #009;\n  content: \"$ \";\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}\n.chroma .language-powershell::before {\n  color: #009;\n  content: \"PM> \";\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}\n\n.navbar.navbar-secondary .nav-link.active::after {\n  background-color: #53565a;\n}\n\n.navbar .nav-link {\n  font-weight: 400;\n}\n\n@media (min-width: 576px) {\n  .navbar .nav-link {\n    padding-top: 0.95rem;\n    padding-bottom: 0.7rem;\n  }\n}\n.navbar .nav-link.active {\n  font-weight: 600;\n  letter-spacing: -0.02em;\n}\n\n.navbar .nav-link::after {\n  content: \"\";\n  display: block;\n  height: 3px;\n  width: 0;\n  margin: 0.15rem auto 0;\n  background: transparent;\n  transition: width 0.15s ease, background-color 0.15s ease;\n}\n\n.navbar .nav-link:hover::after {\n  width: 100%;\n  background-color: #53565a;\n}\n\n.navbar .nav-link.active::after,\n.navbar .nav-link.active:hover::after {\n  width: 100%;\n  background-color: #edb800;\n}\n\n.header {\n  border-bottom: 1px solid #e9ecef;\n}\n\n.header .navbar-nav a {\n  text-decoration: none;\n}\n\n@media (min-width: 992px) {\n  .header {\n    border-bottom: 0 none;\n  }\n}\n@media (max-width: 767.98px) {\n  .navbar-menu .container-lg {\n    flex-direction: column;\n    align-items: stretch;\n  }\n}\n.brand-logo {\n  white-space: nowrap;\n}\n\n.brand-logo-img {\n  height: 3rem;\n}\n\n.brand-logo-sitename {\n  display: inline-block;\n  max-width: 25vw;\n  white-space: normal;\n  vertical-align: text-top;\n  margin-left: 0.75rem;\n  padding-left: 0.5625rem;\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n  border-left: 1px solid #adb5bd;\n  font-size: 80%;\n  line-height: 1.1;\n  text-decoration: none;\n}\n\n.brand-logo-sitename:hover {\n  text-decoration: underline;\n}\n\n.brand-logo-sitename:hover.text-light {\n  color: #a4a4a4 !important;\n}\n\n@media (min-width: 768px) {\n  .brand-logo-img {\n    height: 4rem;\n  }\n\n  .brand-logo-sitename {\n    margin-left: 1.5rem;\n    padding-left: 1.125rem;\n    font-size: 100%;\n  }\n}\n.list-inline-bordered .list-inline-item:not(:last-child) {\n  border-right: 1px solid #adb5bd;\n  margin-right: 1em;\n  padding-right: 1em;\n}\n\n@media (min-width: 992px) {\n  .list-business-info > li {\n    display: inline-block;\n  }\n\n  .list-business-info > li:not(:last-child) {\n    border-right: 1px solid #adb5bd;\n    margin-right: 1em;\n    padding-right: 1em;\n  }\n}\n\n/*# sourceMappingURL=docs.min.css.map */",".navbar.navbar-secondary .nav-link.active::after {\n  background-color: #53565a;\n}\n\n.navbar .nav-link {\n  font-weight: 400;\n}\n\n@media (min-width: 576px) {\n  .navbar .nav-link {\n    padding-top: 0.95rem;\n    padding-bottom: 0.7rem;\n  }\n}\n\n.navbar .nav-link.active {\n  font-weight: 600;\n  letter-spacing: -0.02em;\n}\n\n.navbar .nav-link::after {\n  content: \"\";\n  display: block;\n  height: 3px;\n  width: 0;\n  margin: 0.15rem auto 0;\n  background: transparent;\n  transition: width 0.15s ease, background-color 0.15s ease;\n}\n\n.navbar .nav-link:hover::after {\n  width: 100%;\n  background-color: #53565a;\n}\n\n.navbar .nav-link.active::after,\n.navbar .nav-link.active:hover::after {\n  width: 100%;\n  background-color: #edb800;\n}\n\n.header {\n  border-bottom: 1px solid #e9ecef;\n}\n\n.header .navbar-nav a {\n  text-decoration: none;\n}\n\n@media (min-width: 992px) {\n  .header {\n    border-bottom: 0 none;\n  }\n}\n\n@media (max-width: 767.98px) {\n  .navbar-menu .container-lg {\n    flex-direction: column;\n    align-items: stretch;\n  }\n}\n\n.brand-logo {\n  white-space: nowrap;\n}\n\n.brand-logo-img {\n  height: 3rem;\n}\n\n.brand-logo-sitename {\n  display: inline-block;\n  max-width: 25vw;\n  white-space: normal;\n  vertical-align: text-top;\n  margin-left: 0.75rem;\n  padding-left: 0.5625rem;\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n  border-left: 1px solid #adb5bd;\n  font-size: 80%;\n  line-height: 1.1;\n  text-decoration: none;\n}\n\n.brand-logo-sitename:hover {\n  text-decoration: underline;\n}\n\n.brand-logo-sitename:hover.text-light {\n  color: #a4a4a4 !important;\n}\n\n@media (min-width: 768px) {\n  .brand-logo-img {\n    height: 4rem;\n  }\n\n  .brand-logo-sitename {\n    margin-left: 1.5rem;\n    padding-left: 1.125rem;\n    font-size: 100%;\n  }\n}\n\n.list-inline-bordered .list-inline-item:not(:last-child) {\n  border-right: 1px solid #adb5bd;\n  margin-right: 1em;\n  padding-right: 1em;\n}\n\n@media (min-width: 992px) {\n  .list-business-info > li {\n    display: inline-block;\n  }\n\n  .list-business-info > li:not(:last-child) {\n    border-right: 1px solid #adb5bd;\n    margin-right: 1em;\n    padding-right: 1em;\n  }\n}\n\n"]}